### Steps to Run the App

### Focus Areas: What specific areas of the project did you prioritize? Why did you choose to focus on these areas?
    Network Layer:

    Ensuring efficient and reusable code for fetching data from APIs using a generic Service class, which supports multiple data models.
    Error Handling:

    Gracefully managing errors like network issues, malformed data, or empty responses to improve app reliability and user experience.
    Unit Testing:

    Focusing on testing the network layer to ensure correct error handling and data parsing without relying on real network requests.


### Time Spent: Approximately how long did you spend working on this project? How did you allocate your time?
    3 hr
    Wanted to show key thing like (async/await usage, Generics, use uf SwiftUI Componont usage)

### Trade-offs and Decisions: Did you make any significant trade-offs in your approach?
Wanted to show use of Environment variable but viewModel should not be used like this.

### Weakest Part of the Project: What do you think is the weakest part of your project?

The weakest part of the project is the UI/UX design. While the core functionality, including network handling and error management, is well-implemented, the user interface could be enhanced for a more polished experience.I focused on the backend logic and error handling, leaving the UI elements relatively simple. A more refined UI with features like pull-to-refresh, better error messages, and a visually appealing layout would improve the overall user experience.


### External Code and Dependencies: Did you use any external code, libraries, or dependencies? Not used 3rd party

### Additional Information: Is there anything else we should know? Feel free to share any insights or constraints you encountered.
Because of time crunch just wrote unit test for Service layer
